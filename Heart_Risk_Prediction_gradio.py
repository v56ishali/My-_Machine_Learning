# -*- coding: utf-8 -*-
"""heart_gradio.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1TajchEgEFJfIMLzp9zUXDU1wjH1P-l02
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.cluster import KMeans

heart=pd.read_csv("/content/heart.csv")
heart.head()

heart.isnull().sum()

heart.shape

X=heart.iloc[:,[0,4,5]].values

print(X)

heart.info()

wcss = []
for i in range(1,11):
  Kmeans = KMeans(n_clusters = i, init = 'k-means++',random_state=42)
  Kmeans.fit(X)
  wcss.append(Kmeans.inertia_)

k=KMeans(n_clusters=2,init='k-means++',random_state=0)
y=k.fit_predict(X)
print(y)

plt.figure(figsize=(8,5))
plt.scatter(X[y==0,0],X[y==0,1],s=50,c='red',label='High Risk')
plt.scatter(X[y==1,0],X[y==1,1],s=50,c='blue',label='Medium Risk')
plt.scatter(k.cluster_centers_[:,0],k.cluster_centers_[:,1],s=100,c='yellow',label='Centroids')
plt.title('Patient Clusters based on age and cholestrol')
plt.xlabel('blood pressure Level' )
plt.ylabel('cholestrol Level')
plt.legend()
plt.show()

sns.set()
plt.plot(range(1,11),wcss)
plt.title('The Elbow Method')
plt.xlabel('Number of clusters')
plt.ylabel('WCSS')
plt.show()

sns.set()
plt.bar(range(1,11),wcss)
plt.title('The Elbow Method')
plt.xlabel('Number of clusters')
plt.ylabel('WCSS')
plt.show()

import gradio as gr
import pandas as pd
import numpy as np
from sklearn.cluster import KMeans
from sklearn.preprocessing import StandardScaler

# Load dataset
df = pd.read_csv("/content/heart.csv")
df.dropna(inplace=True)

# Use Age, BP, Cholesterol
X = df.iloc[:, [0, 2, 3]].values

# Scale
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# KMeans model
kmeans = KMeans(n_clusters=3, init='k-means++', random_state=0)
kmeans.fit(X_scaled)

# Labels
risk_labels = {
    0: ("🟢 Low Risk", "“Take care of your body. It’s the only place you have to live.” – Jim Rohn"),
    1: ("🔴 High Risk", "“Your health is an investment, not an expense.”"),
    2: ("🟡 Medium Risk", "“Every step toward better health is a step toward a better you.”")
}

# Prediction function with strict check
def predict_risk(age, bp, chol):
    if age is None or bp is None or chol is None:
        return "❌ Error: All three inputs (Age, Blood Pressure, Cholesterol) must be provided!"

    if not (0 <= age <= 120):
        return "❌ Age must be between 0 and 120"
    if not (60 <= bp <= 200):
        return "❌ Blood Pressure must be between 60 and 200"
    if not (100 <= chol <= 400):
        return "❌ Cholesterol must be between 100 and 400"

    input_data = np.array([[age, bp, chol]])
    input_scaled = scaler.transform(input_data)
    cluster = kmeans.predict(input_scaled)[0]
    risk, quote = risk_labels.get(cluster, ("❓ Unknown", "Stay healthy and strong!"))
    return f"🩺 Risk Level: {risk}\n💬 Motivation: {quote}"

# Gradio App with strict input check
with gr.Blocks() as app:
    gr.HTML("<marquee behavior='scroll' direction='left' style='color:darkred; font-weight:bold;'>💡 Tip: Eat healthy, exercise regularly, and stay informed about your health! ❤</marquee>")

    gr.Markdown("## 🫀 Heart Disease Risk Predictor")
    gr.Markdown("All three fields are required to predict risk.")

    age = gr.Number(label="👵 Age (0–120)")
    bp = gr.Number(label="💓 Blood Pressure (60–200)")
    chol = gr.Number(label="🩸 Cholesterol (100–400)")
    output = gr.Textbox(label="📊 Prediction Result")

    predict_btn = gr.Button("🔍 Predict")

    predict_btn.click(fn=predict_risk, inputs=[age, bp, chol], outputs=output)

app.launch()